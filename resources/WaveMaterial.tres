[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform vec2 resolution;
uniform vec4 waveColor: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D noise;
uniform float radius: hint_range(0, 1) = 0.5;
uniform float border: hint_range(0.001, 0.2) = 0.01;
uniform float frequency = 60;
uniform float depth = 0.005;

float aa_circle(vec2 _st, float _radius, float _border) {
    vec2 center = vec2(0.5);
    float dist = length(_st - center);
    float t = 1.0 + smoothstep(_radius, _radius + _border, dist) - smoothstep(_radius - _border, _radius, dist);
    return 1.0 - t;
}

float rand(vec2 uv) {
    return texture(noise, uv).r;
}

vec2 apply_sine(vec2 uv, float freq, float sine_depth, float time) {
    uv.x += sin(uv.y * freq + time) * sine_depth;
    uv.x = clamp(uv.x, 0.0, 1.0);
    uv.y += cos(uv.x * freq + time * 2.0) * sine_depth;
    uv.y = clamp(uv.y, 0.0, 1.0);
    return uv;
}

void fragment() {
    vec2 uv = apply_sine(UV, frequency, depth, TIME);
    float frg = aa_circle(uv, radius, border);
    
    vec3 bg = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
    if (frg == 0.0) {
      discard;
    }
    
    vec3 color = clamp(vec3(1.0) - bg, vec3(0.0), vec3(1.0));
    COLOR = vec4(mix(color, waveColor.rgb, 0.5), waveColor.a * frg);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/resolution = Vector2( 512, 512 )
shader_param/waveColor = Color( 0.266667, 0.94902, 1, 1 )
shader_param/radius = 0.0
shader_param/border = 0.01
shader_param/frequency = 60.0
shader_param/depth = 0.005
shader_param/noise = SubResource( 3 )
